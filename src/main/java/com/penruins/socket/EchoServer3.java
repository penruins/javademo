package com.penruins.socket;

/**
 * 在EchoServer2这个版本中，对每个客户都分配一个新的工作线程。当工作线程与客户通信结束，这个线程就被销毁
 * 这样的实现方式有以下不足之处
 *      服务器创建和销毁工作线程的开销（包括所花费的时间和系统资源）很大。如果服务器需要与许多客户通信，并且与
 *      每个客户的通信时间都很短，那么有可能服务器为客户创建新线程的开销比实际与客户通信的开销还要大
 *
 *      除了创建和销毁线程的开销之外，活动的线程也消耗系统资源。每个线程本身都会占用一定的内存（每个线程需要大约1MB内存）
 *      如果同时又大量客户连接服务器，就必须创建大量工作线程，他们消耗了大量内容，可能会导致系统的内存空间不足
 *
 *      如果线程数目固定，并且每个线程都有很长的生命周期，那么线程切换也是相对固定的，不同操作系统由不同的切换周期，
 *      一般在20毫秒左右。这里所说的线程切换是指在Java虚拟机，以及底层操作系统的调度下，线程之间转让CPU的使用权。
 *      如果频繁创建和销毁线程，那么将导致频繁地切换线程，因为一个线程被销毁后，必然要把CPU转让给另一个已经就绪的线程，
 *      使该线程获得运行机会。在这种情况下，线程之间的切换不再遵循系统的固定切换周期，切换线程的开销甚至比创建和销毁线程
 *      的开销还大。
 *
 *
 *      线程池为线程生命周期开销问题和系统资源不足问题提供了解决方案。线程池中预先创建了一些工作线程，它们不断从工作队列中取出任务
 *      然后执行该任务。当工作线程完成了一个任务时，就会继续执行工作队列中的下一个任务。
 *
 *
 */
public class EchoServer3 {
}
